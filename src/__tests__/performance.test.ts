import { VietnamAddressConverter } from '../AddressConverter';
import { OptimizedVietnamAddressConverter } from '../OptimizedAddressConverter';

/**
 * Performance comparison test
 */
async function performanceTest() {
  console.log('üöÄ Starting Performance Comparison Test\n');
  
  // Test data
  const testAddresses = [
    'Ph∆∞·ªùng 12, Qu·∫≠n G√≤ V·∫•p, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'X√£ VƒÉn Lu√¥ng, Huy·ªán T√¢n S∆°n, T·ªânh Ph√∫ Th·ªç',
    'Ph∆∞·ªùng An L·∫°c, Qu·∫≠n B√¨nh T√¢n, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'X√£ Ph√∫ H·ªìng, Huy·ªán Ba V√¨, Th√†nh ph·ªë H√† N·ªôi',
    '123 Nguy·ªÖn VƒÉn C·ª´, Ph∆∞·ªùng 5, Qu·∫≠n G√≤ V·∫•p, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'Ph∆∞·ªùng T√¢n ƒê·ªãnh, Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'X√£ T√¢n Ph√∫, Huy·ªán ƒê√¥ng H√≤a, T·ªânh Ph√∫ Y√™n',
    'Ph∆∞·ªùng Nguy·ªÖn Du, Qu·∫≠n Hai B√† Tr∆∞ng, Th√†nh ph·ªë H√† N·ªôi',
    'X√£ H√≤a B√¨nh, Huy·ªán B·∫Øc √Åi, T·ªânh Ninh Thu·∫≠n',
    'Ph∆∞·ªùng 6, Qu·∫≠n 3, Th√†nh ph·ªë H·ªì Ch√≠ Minh'
  ];
  
  // T·∫°o danh s√°ch test l·ªõn h∆°n b·∫±ng c√°ch duplicate
  const largeTestSet: string[] = [];
  for (let i = 0; i < 100; i++) {
    largeTestSet.push(...testAddresses);
  }
  
  console.log(`Test set size: ${largeTestSet.length} addresses\n`);
  
  // Test original converter
  console.log('üìä Testing Original Converter...');
  const originalConverter = new VietnamAddressConverter();
  
  let startTime = performance.now();
  await originalConverter.initialize();
  let endTime = performance.now();
  console.log(`  Initialization: ${Math.round(endTime - startTime)}ms`);
  
  startTime = performance.now();
  const originalResults = largeTestSet.map(addr => originalConverter.convertAddress(addr));
  endTime = performance.now();
  const originalTime = endTime - startTime;
  console.log(`  Conversion time: ${Math.round(originalTime)}ms`);
  console.log(`  Average per address: ${Math.round(originalTime / largeTestSet.length * 1000) / 1000}ms`);
  
  const originalSuccessCount = originalResults.filter(r => r.success).length;
  console.log(`  Success rate: ${Math.round(originalSuccessCount / originalResults.length * 100)}%`);
  
  // Test optimized converter
  console.log('\nüî• Testing Optimized Converter...');
  const optimizedConverter = new OptimizedVietnamAddressConverter();
  
  startTime = performance.now();
  await optimizedConverter.initialize();
  endTime = performance.now();
  console.log(`  Initialization: ${Math.round(endTime - startTime)}ms`);
  
  startTime = performance.now();
  const optimizedResults = largeTestSet.map(addr => optimizedConverter.convertAddress(addr));
  endTime = performance.now();
  const optimizedTime = endTime - startTime;
  console.log(`  Conversion time: ${Math.round(optimizedTime)}ms`);
  console.log(`  Average per address: ${Math.round(optimizedTime / largeTestSet.length * 1000) / 1000}ms`);
  
  const optimizedSuccessCount = optimizedResults.filter(r => r.success).length;
  console.log(`  Success rate: ${Math.round(optimizedSuccessCount / optimizedResults.length * 100)}%`);
  
  // Performance stats
  const perfStats = optimizedConverter.getPerformanceStats();
  console.log(`  Cache hit rate: ${Math.round(perfStats.cacheHits / perfStats.totalConversions * 100)}%`);
  
  // Test batch conversion
  console.log('\n‚ö° Testing Batch Conversion...');
  startTime = performance.now();
  const batchResults = optimizedConverter.convertAddresses(testAddresses);
  endTime = performance.now();
  console.log(`  Batch time: ${Math.round(endTime - startTime)}ms`);
  
  // Performance comparison
  console.log('\nüìà Performance Comparison:');
  const speedup = originalTime / optimizedTime;
  console.log(`  Speed improvement: ${Math.round(speedup * 100) / 100}x faster`);
  console.log(`  Time saved: ${Math.round(originalTime - optimizedTime)}ms (${Math.round((originalTime - optimizedTime) / originalTime * 100)}%)`);
  
  // Memory usage comparison (rough estimate)
  console.log('\nüíæ Memory Usage:');
  console.log(`  Optimized cache size: ${perfStats.cacheSize} conversions cached`);
  console.log(`  Province cache: ${perfStats.provinceCacheSize} entries`);
  console.log(`  Ward cache: ${perfStats.wardCacheSize} entries`);
  
  // Clear cache and test again
  console.log('\nüßπ Testing Cache Clear...');
  optimizedConverter.clearCache();
  
  startTime = performance.now();
  const afterClearResults = testAddresses.map(addr => optimizedConverter.convertAddress(addr));
  endTime = performance.now();
  console.log(`  Conversion after cache clear: ${Math.round(endTime - startTime)}ms`);
  
  console.log('\n‚úÖ Performance test completed!');
}

// Run test
performanceTest().catch(console.error);
