import { OptimizedDataLoader } from './OptimizedDataLoader';
import { FullAddress, ValidAddress, NewAddress, ConversionResult, WardMapping, Province, Ward } from './types';
import { 
  normalizeText, 
  calculateSimilarity, 
  findBestMatch, 
  removeAdministrativeTypes,
  parseAddress,
  fuzzyContains
} from './utils';

/**
 * Class ch√≠nh ƒë·ªÉ chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ h√†nh ch√≠nh Vi·ªát Nam t·ª´ c≈© sang m·ªõi
 * ƒê√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a v·ªõi cache v√† batch processing
 */
export class VietnamAddressConverter {
  private dataLoader: OptimizedDataLoader;
  private isInitialized = false;
  
  // Caches ƒë·ªÉ tr√°nh t√≠nh to√°n l·∫°i
  private conversionCache = new Map<string, ConversionResult>();
  private provinceCache = new Map<string, Province | undefined>();
  private wardCache = new Map<string, Ward | undefined>();
  
  // Performance tracking
  private stats = {
    totalConversions: 0,
    cacheHits: 0,
    avgConversionTime: 0
  };

  constructor() {
    this.dataLoader = new OptimizedDataLoader();
  }

  /**
   * Kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu m·∫∑c ƒë·ªãnh (Node.js)
   */
  async initialize(dataFilePath?: string): Promise<void> {
    try {
      const startTime = performance.now();
      await this.dataLoader.loadFromFile(dataFilePath);
      const endTime = performance.now();
      
      this.isInitialized = true;
      console.log(`üöÄ Converter initialized in ${Math.round(endTime - startTime)}ms`);
      console.log('üìä Data stats:', this.dataLoader.getStats());
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ kh·ªüi t·∫°o converter: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu t·ª´ URL (Browser)
   */
  async initializeFromUrl(dataUrl?: string): Promise<void> {
    try {
      const startTime = performance.now();
      await this.dataLoader.loadFromUrl(dataUrl);
      const endTime = performance.now();
      
      this.isInitialized = true;
      console.log(`üöÄ Converter initialized in ${Math.round(endTime - startTime)}ms`);
      console.log('üìä Data stats:', this.dataLoader.getStats());
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ kh·ªüi t·∫°o converter: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ v·ªõi cache v√† optimization
   */
  convertAddress(address: string | FullAddress): ConversionResult {
    if (!this.isInitialized) {
      throw new Error('Converter ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. H√£y g·ªçi initialize() tr∆∞·ªõc.');
    }

    const startTime = performance.now();
    
    // T·∫°o cache key t·ª´ input
    const cacheKey = typeof address === 'string' ? address : JSON.stringify(address);
    
    // Ki·ªÉm tra cache tr∆∞·ªõc
    if (this.conversionCache.has(cacheKey)) {
      this.stats.cacheHits++;
      return this.conversionCache.get(cacheKey)!;
    }

    const fullAddress = typeof address === 'string' ? parseAddress(address) : address;
    
    if (!fullAddress.province) {
      const result: ConversionResult = {
        success: false,
        originalAddress: fullAddress,
        message: 'ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t t√™n t·ªânh/th√†nh ph·ªë'
      };
      
      this.conversionCache.set(cacheKey, result);
      return result;
    }

    const validAddress: ValidAddress = fullAddress as ValidAddress;
    
    // T√¨m mapping v·ªõi optimized search
    const mappings = this.dataLoader.findMappingByOldAddress(
      validAddress.ward,
      validAddress.district,
      validAddress.province
    );

    let result: ConversionResult;

    if (mappings.length === 0) {
      // S·ª≠ d·ª•ng cached province lookup
      const newProvinceMatch = this.findNewProvinceCached(validAddress.province);
      if (newProvinceMatch) {
        const newWardMatch = this.findNewWardCached(validAddress.ward || '', newProvinceMatch.province_code);
        
        if (newWardMatch) {
          result = {
            success: true,
            originalAddress: fullAddress,
            convertedAddress: {
              ward: newWardMatch.name,
              province: newProvinceMatch.name,
              street: validAddress.street
            },
            mappingInfo: {
              mappingType: 'unchanged'
            },
            message: 'ƒê·ªãa ch·ªâ kh√¥ng thay ƒë·ªïi (exact match)'
          };
        } else {
          result = {
            success: false,
            originalAddress: fullAddress,
            message: `Kh√¥ng t√¨m th·∫•y mapping cho ph∆∞·ªùng/x√£: ${validAddress.ward} trong ${newProvinceMatch.name}`
          };
        }
      } else {
        result = {
          success: false,
          originalAddress: fullAddress,
          message: `Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë: ${validAddress.province}`
        };
      }
    } else {
      // T√¨m mapping ph√π h·ª£p nh·∫•t v·ªõi fast matching
      const bestMapping = this.findBestMappingFast(validAddress, mappings);
      
      if (!bestMapping) {
        result = {
          success: false,
          originalAddress: fullAddress,
          message: 'Kh√¥ng t√¨m th·∫•y mapping ph√π h·ª£p'
        };
      } else {
        // X√¢y d·ª±ng ƒë·ªãa ch·ªâ m·ªõi t·ª´ mapping
        const convertedAddress = this.buildConvertedAddress(bestMapping, validAddress.street);
        
        result = {
          success: true,
          originalAddress: fullAddress,
          convertedAddress,
          mappingInfo: {
            mappingType: 'merged' // simplified mapping type
          },
          message: 'Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng'
        };
      }
    }

    // Cache result
    this.conversionCache.set(cacheKey, result);
    
    // Update performance stats
    const endTime = performance.now();
    this.stats.totalConversions++;
    this.stats.avgConversionTime = (this.stats.avgConversionTime * (this.stats.totalConversions - 1) + (endTime - startTime)) / this.stats.totalConversions;

    return result;
  }

  /**
   * Batch conversion v·ªõi optimizations
   */
  convertAddresses(addresses: (string | FullAddress)[]): ConversionResult[] {
    console.log(`üîÑ Converting ${addresses.length} addresses in batch...`);
    const startTime = performance.now();
    
    const results = addresses.map(address => this.convertAddress(address));
    
    const endTime = performance.now();
    console.log(`‚úÖ Batch conversion completed in ${Math.round(endTime - startTime)}ms`);
    console.log(`üìà Cache hit rate: ${Math.round((this.stats.cacheHits / this.stats.totalConversions) * 100)}%`);
    
    return results;
  }

  /**
   * Cached province lookup
   */
  private findNewProvinceCached(provinceName: string): Province | undefined {
    if (this.provinceCache.has(provinceName)) {
      return this.provinceCache.get(provinceName);
    }
    
    const province = this.dataLoader.findProvinceByName(provinceName);
    this.provinceCache.set(provinceName, province);
    return province;
  }

  /**
   * Cached ward lookup
   */
  private findNewWardCached(wardName: string, provinceCode?: string): Ward | undefined {
    const cacheKey = `${wardName}_${provinceCode || ''}`;
    
    if (this.wardCache.has(cacheKey)) {
      return this.wardCache.get(cacheKey);
    }
    
    const ward = this.dataLoader.findWardByName(wardName, provinceCode);
    this.wardCache.set(cacheKey, ward);
    return ward;
  }

  /**
   * Fast mapping selection v·ªõi simplified scoring
   */
  private findBestMappingFast(address: ValidAddress, mappings: WardMapping[]): WardMapping | null {
    if (mappings.length === 1) {
      return mappings[0];
    }
    
    let bestMapping: WardMapping | null = null;
    let bestScore = 0;
    
    const normalizedProvince = normalizeText(address.province);
    const normalizedDistrict = normalizeText(address.district || '');
    const normalizedWard = normalizeText(address.ward || '');
    
    for (const mapping of mappings) {
      let score = 0;
      
      // Fast exact match checks
      if (mapping.old_province_name && normalizeText(mapping.old_province_name) === normalizedProvince) {
        score += 10;
      }
      
      if (mapping.old_district_name && normalizeText(mapping.old_district_name) === normalizedDistrict) {
        score += 10;
      }
      
      if (mapping.old_ward_name && normalizeText(mapping.old_ward_name) === normalizedWard) {
        score += 20;
      }
      
      // Quick similarity check only if no exact matches
      if (score === 0) {
        if (mapping.old_province_name) {
          score += calculateSimilarity(normalizedProvince, normalizeText(mapping.old_province_name)) * 5;
        }
        if (mapping.old_ward_name) {
          score += calculateSimilarity(normalizedWard, normalizeText(mapping.old_ward_name)) * 10;
        }
      }
      
      if (score > bestScore) {
        bestScore = score;
        bestMapping = mapping;
      }
      
      // Early exit for perfect matches
      if (score >= 40) break;
    }
    
    return bestScore > 15 ? bestMapping : null;
  }

  /**
   * Build converted address t·ª´ mapping
   */
  private buildConvertedAddress(mapping: WardMapping, street?: string): NewAddress {
    return {
      ward: mapping.new_ward_name || 'Unknown Ward',
      province: mapping.new_province_name || 'Unknown Province',
      street: street
    };
  }

  /**
   * Check if address has changes
   */
  private hasAddressChanges(oldAddress: ValidAddress, newAddress: NewAddress): boolean {
    const oldNormalized = `${normalizeText(oldAddress.ward || '')}_${normalizeText(oldAddress.province)}`;
    const newNormalized = `${normalizeText(newAddress.ward || '')}_${normalizeText(newAddress.province || '')}`;
    
    return oldNormalized !== newNormalized;
  }

  /**
   * Clear caches ƒë·ªÉ gi·∫£i ph√≥ng memory
   */
  clearCache(): void {
    this.conversionCache.clear();
    this.provinceCache.clear();
    this.wardCache.clear();
    console.log('üßπ Caches cleared');
  }

  /**
   * Get performance statistics
   */
  getPerformanceStats() {
    return {
      ...this.stats,
      cacheSize: this.conversionCache.size,
      provinceCacheSize: this.provinceCache.size,
      wardCacheSize: this.wardCache.size,
      dataStats: this.dataLoader.getStats()
    };
  }

  // Backward compatibility methods
  getProvinces(): Province[] { return this.dataLoader.getProvinces(); }
  getWards(): Ward[] { return this.dataLoader.getWards(); }
  getWardMappings(): WardMapping[] { return this.dataLoader.getWardMappings(); }

  /**
   * L·∫•y th·ªëng k√™ d·ªØ li·ªáu
   */
  getDataStats() {
    if (!this.isInitialized) {
      throw new Error('Converter ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }
    return this.dataLoader.getStats();
  }

  /**
   * L·∫•y danh s√°ch ph∆∞·ªùng/x√£ theo t·ªânh
   */
  getWardsByProvince(provinceCode: string) {
    if (!this.isInitialized) {
      throw new Error('Converter ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }
    return this.dataLoader.getWards().filter((ward: Ward) => ward.province_code === provinceCode);
  }

  /**
   * T√¨m ki·∫øm mapping theo t·ª´ kh√≥a
   */
  searchMappings(keyword: string) {
    if (!this.isInitialized) {
      throw new Error('Converter ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }
    
    const normalizedKeyword = normalizeText(keyword);
    return this.dataLoader.getWardMappings().filter((mapping: WardMapping) => {
      const searchText = `${mapping.old_ward_name} ${mapping.old_district_name} ${mapping.old_province_name} ${mapping.new_ward_name} ${mapping.new_province_name}`;
      return fuzzyContains(searchText, keyword, 0.6);
    });
  }
}
